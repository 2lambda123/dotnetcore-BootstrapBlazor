@inject IStringLocalizer<CameraNormal> Localizer

<Camera OnInit="@OnInit" OnStart="@OnStart" OnClose="@OnClose" OnError="@OnError" OnCapture="@OnCapture" />
@if (ImageUrl != null)
{
    <img src="@ImageUrl" class="mt-3" />
}
<BlockLogger @ref="Trace" class="mt-3" />

@code {
    private string? ImageUrl { get; set; }

    [NotNull]
    private BlockLogger? Trace { get; set; }

    [NotNull]
    private string? TraceOnInit { get; set; }

    [NotNull]
    private string? TraceOnError { get; set; }

    [NotNull]
    private string? TraceOnStar { get; set; }

    [NotNull]
    private string? TraceOnClose { get; set; }

    [NotNull]
    private string? TraceOnCapture { get; set; }

    /// <summary>
    /// OnInitialized 方法
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        TraceOnInit = Localizer[nameof(TraceOnInit)];
        TraceOnError = Localizer[nameof(TraceOnError)];
        TraceOnStar = Localizer[nameof(TraceOnStar)];
        TraceOnClose = Localizer[nameof(TraceOnClose)];
        TraceOnCapture = Localizer[nameof(TraceOnCapture)];
    }

    private Task OnInit(IEnumerable<DeviceItem> devices)
    {
        var cams = string.Join("", devices.Select(i => i.Label));
        Trace.Log($"{TraceOnInit} {cams}");
        return Task.CompletedTask;
    }

    private Task OnError(string err)
    {
        Trace.Log($"{TraceOnError} {err}");
        return Task.CompletedTask;
    }

    private Task OnStart()
    {
        ImageUrl = null;
        Trace.Log(TraceOnStar);
        return Task.CompletedTask;
    }

    private Task OnClose()
    {
        Trace.Log(TraceOnClose);
        return Task.CompletedTask;
    }

    private Task OnCapture(string url)
    {
        ImageUrl = url;
        Trace.Log(TraceOnCapture);
        StateHasChanged();
        return Task.CompletedTask;
    }
}
